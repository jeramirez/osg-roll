<?xml version="1.0" standalone="no"?>

<kickstart>


	<description>
	The OSG Roll.
	</description>

	<copyright>
         No yet Eduardo's test	
	</copyright>

<changelog>
	$Log: osg-gums.xml,v $
	Revision 0.0  2012/10/05 05:48:53  eduardo
	Initial Revision
	
</changelog>

<package>libxml2.&arch;</package>
<package>yum-priorities</package>
<package>yum-cron</package>
<package>perl-libwww-perl</package>
<package>perl-URI</package>
<package>fetch-crl</package>


<post>
<!-- 
     this xml should be called after yum.xml
     yum.xml requires libxml2.&arch; for VMs
-->
#tomcat:x:91:91:Tomcat:/usr/share/tomcat5:/bin/sh
/usr/sbin/groupadd -g &OSG_tomcatgid; tomcat
/usr/sbin/useradd -u &OSG_tomcatuid; -g &OSG_tomcatgid; -c "Tomcat" -s /bin/sh -d -m /usr/share/tomcat&rocks_version_major; tomcat
#mysql:x:27:27:MySQL Server:/usr/lib/mysql:/bin/bash
/usr/sbin/groupadd -g 27 mysql
/usr/sbin/useradd -u 27 -g 27 -c "MySQL Server" -s /bin/bash -d /usr/lib/mysql mysql

 <!-- install osg-gums from local mirror-->
yum install osg-gums  &gt;&gt; /var/log/gums-install.log 2&gt;&amp;1
/var/lib/trustmanager-tomcat/configure.sh &gt;&gt; /var/log/gums-install.log 2&gt;&amp;1

 <!-- customize firewall rules for gums-server  -->
<eval mode="xml">
/opt/rocks/bin/rocks add firewall host=&hostname; rulename=A20-GUMS-TCP-PORT network=public service=8443 protocol="tcp" action="ACCEPT" chain="INPUT" flags="-m state --state NEW"
/opt/rocks/bin/rocks report host firewall &hostname;
</eval>


<file name="/root/install_cert_gums.sh" perms="0750" >
#!/bin/sh

THISHOST=`hostname`
THISEXEC=$0
DIRNAME=`dirname $THISEXEC`
GUMSSERVER="&OSG_GumsServer;"
CERTSDIR="&OSG_StoredCertsDir;/&hostname;"

#temporary solution (or permanent?) while figuring out
#how to import certs at installation step in a secure way
if [ ! -f $DIRNAME/hostcert.pem ]; then
  if [ ! -f $CERTSDIR/hostcert.pem ]; then
     echo "-- NO sec_attr set for hostcert NOR $CERTSDIR/hostcert.pem exist"
  else
     cp -p $CERTSDIR/hostcert.pem $DIRNAME/.
  fi
fi
if [ ! -f $DIRNAME/hostkey.pem ]; then
  if [ ! -f $CERTSDIR/hostkey.pem ]; then
     echo "-- NO sec_attr set for hostkey NOR $CERTSDIR/hostkey.pem exist"
  else
     cp -p $CERTSDIR/hostkey.pem  $DIRNAME/.
  fi
fi
if [ ! -f $DIRNAME/httpcert.pem ]; then
  if [ ! -f $CERTSDIR/httpcert.pem ]; then
     echo "-- NO sec_attr set for httpcert NOR $CERTSDIR/httpcert.pem exist"
  else
     cp -p $CERTSDIR/httpcert.pem $DIRNAME/.
  fi
fi
if [ ! -f $DIRNAME/httpkey.pem ]; then
  if [ ! -f $CERTSDIR/httpkey.pem ]; then
     echo "-- NO sec_attr set for httpkey NOR $CERTSDIR/httpkey.pem exist"
  else
     cp -p $CERTSDIR/httpkey.pem  $DIRNAME/.
  fi
fi

if [ "$THISHOST" == "$GUMSSERVER" ]||[ "$THISHOST" == "&hostname;.local" ]; then
  echo "installing grid certs on $THISHOST"
  echo "searching certs in $DIRNAME"
  if [ ! -f /etc/grid-security/hostcert.pem ]; then
    if [ ! -f $DIRNAME/hostcert.pem ]; then
     echo "-- hostcert.pem NOT installed, please set sec_attr hostcert for host &hostname;"
    else
     cp -p $DIRNAME/hostcert.pem /etc/grid-security/.
    fi
  else
     echo "-- hostcert.pem already installed no need to install it."
  fi
  if [ ! -f /etc/grid-security/hostkey.pem ]; then
    if [ ! -f $DIRNAME/hostkey.pem ]; then
     echo "-- hostkey.pem NOT installed, please set sec_attr hostkey for host &hostname;"
    else
     cp -p $DIRNAME/hostkey.pem /etc/grid-security/.
    fi
  else
     echo "-- hostkey.pem already installed no need to install it."
  fi
  chown root:root /etc/grid-security/hostcert.pem
  chown root:root /etc/grid-security/hostkey.pem
  chmod 444 /etc/grid-security/hostcert.pem
  chmod 400 /etc/grid-security/hostkey.pem
  [ -d /etc/grid-security/http ]||mkdir /etc/grid-security/http
  if [ ! -f /etc/grid-security/http/httpcert.pem ]; then
    if [ ! -f $DIRNAME/httpcert.pem ]; then
     echo "-- httpcert.pem NOT installed, please set sec_attr httpcert for host &hostname;"
    else
     cp -p $DIRNAME/httpcert.pem /etc/grid-security/http/httpcert.pem
     echo "-- httpcert.pem copied from $DIRNAME/httpcert.pem"
    fi
  else
     echo "-- httpcert.pem already installed no need to install it."
  fi
  if [ ! -f /etc/grid-security/http/httpkey.pem ]; then
    if [ ! -f $DIRNAME/httpkey.pem ]; then
     echo "-- httpkey.pem NOT installed, please set sec_attr httpkey for host &hostname;"
    else
     cp -p $DIRNAME/httpkey.pem /etc/grid-security/http/httpkey.pem
     echo "-- httpkey.pem copied from $DIRNAME/httpkey.pem."
    fi
  else
     echo "-- httpkey.pem already installed no need to install it."
  fi

  chown -R tomcat:tomcat /etc/grid-security/http
  chmod 444 /etc/grid-security/http/httpcert.pem
  chmod 400 /etc/grid-security/http/httpkey.pem
else
  echo "$THISHOST Wrong server to install "
fi

</file>

<file name="/root/ConfigureGumsUpgradeFromPacman.sh" perms="0700" >
#!/bin/bash

#input parameters
TABLEFROMPACMAN=&OSG_GUMSBackupDir;/gums_1_3.sql_pacman
GUMSCONFIGPACMAN=&OSG_GUMSBackupDir;/gums.config_pacman
ADMINID1='&OSG_GUMSDNADMIN;'

#optional input parameters (default recycle old gums passwd and replace gum.config)
GUMSPASSWD=`grep hibernate.connection.password= $GUMSCONFIGPACMAN | sed -e "s@\t\t\thibernate.connection.password='@@" | sed -e "s@'/&gt;@@"`
GUMSCONFIGRPM=/etc/gums/gums.config

#import database from pacman
service mysqld start
echo '1....importing database from pacman'
echo 'CREATE DATABASE IF NOT EXISTS GUMS_1_3;' | mysql
mysql GUMS_1_3 &lt; $TABLEFROMPACMAN
echo 'RENAME TABLE USER TO USERS;' | mysql GUMS_1_3

#set mysql for user gums (configure gums)
echo '2....configuring new gums server'
echo "GRANT ALL ON GUMS_1_3.* TO 'gums'@'localhost' IDENTIFIED BY '$GUMSPASSWD';" | mysql -u root mysql

#get gums.config from pacman and convert it to rpm style (if needed make sure username is gums)
echo '3....converting gums.config from pacman to rpm'
cp -f -p $GUMSCONFIGRPM $GUMSCONFIGRPM.original
cp -f $GUMSCONFIGPACMAN $GUMSCONFIGRPM
chown tomcat:tomcat $GUMSCONFIGRPM
chmod 600 $GUMSCONFIGRPM
sed -i -e "s@hibernate.connection.username='.*'@hibernate.connection.username='gums'@g" $GUMSCONFIGRPM
sed -i -e "s@hibernate.connection.url='jdbc:mysql://.*/GUMS_1_3'@hibernate.connection.url='jdbc:mysql://localhost:3306/GUMS_1_3'@g" $GUMSCONFIGRPM
sed -i -e "s@sslCAFiles=''@sslCAFiles='/etc/grid-security/certificates/*.0'@g" $GUMSCONFIGRPM
sed -i -e "s@/services/VOMSAdmin'@'@g" $GUMSCONFIGRPM

#set add DN admin for gums
echo '4....adding gums DN admin'
cat /usr/lib/gums/sql/addAdmin.mysql | sed -e "s%@ADMINDN@%$ADMINID1%g" | mysql -u gums --password=$GUMSPASSWD

echo "it is recomended to run /usr/bin/mysql_secure_installation"

</file>

<file name="/root/ConfigureGumsUpgradeFromRPM.sh" perms="0700" >
#!/bin/bash

#input parameters
TABLEFROMRPM=&OSG_GUMSBackupDir;/gums_1_3.sql_rpm
GUMSCONFIGFROMRPM=&OSG_GUMSBackupDir;/gums.config_rpm
ADMINID1='&OSG_GUMSDNADMIN;'

#optional input parameters (default recycle old gums passwd and replace gum.config)
GUMSPASSWD=`grep hibernate.connection.password= $GUMSCONFIGFROMRPM | sed -e "s@\t\t\thibernate.connection.password='@@" | sed -e "s@'/&gt;@@"`
GUMSCONFIGRPM=/etc/gums/gums.config

#configure tomcat to use GSI
/var/lib/trustmanager-tomcat/configure.sh

#import database from rpm
service mysqld start
echo '1....importing database from rpm'
echo 'CREATE DATABASE IF NOT EXISTS GUMS_1_3;' | mysql
mysql GUMS_1_3 &lt; $TABLEFROMRPM

#set mysql for user gums (configure gums)
echo '2....configuring new gums server'
echo "GRANT ALL ON GUMS_1_3.* TO 'gums'@'localhost' IDENTIFIED BY '$GUMSPASSWD';" | mysql -u root mysql

#get gums.config from old rpm
echo '3....copying gums.config from old rpm to new rpm'
cp -f -p $GUMSCONFIGRPM $GUMSCONFIGRPM.original
cp -f $GUMSCONFIGFROMRPM $GUMSCONFIGRPM
chown tomcat:tomcat $GUMSCONFIGRPM
chmod 600 $GUMSCONFIGRPM

#set add DN admin for gums
echo '4....adding gums DN admin'
cat /usr/lib/gums/sql/addAdmin.mysql | sed -e "s%@ADMINDN@%$ADMINID1%g" | mysql -u gums --password=$GUMSPASSWD

echo "it is recomended to run /usr/bin/mysql_secure_installation"

</file>

<file name="/root/ConfigureGumsFreshInstall.sh" perms="0700" >
#!/bin/bash

#input parameters
ADMINID1='&OSG_GUMSDNADMIN;'

#optional input parameters
GUMSPASSWD=`&lt; /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-16};echo;`
GUMSCONFIGRPM=/etc/gums/gums.config

#configure tomcat to use GSI
/var/lib/trustmanager-tomcat/configure.sh

service mysqld start
echo '1....configuring a fresh install gums server'
/usr/bin/gums-setup-mysql-database --user gums --host localhost:3306 --password $GUMSPASSWD --template /etc/gums/gums.config.template --noprompt

#set add DN admin for gums
echo '2....adding gums DN admin'
#gums-add-mysql-admin '/MY/DN'
cat /usr/lib/gums/sql/addAdmin.mysql | sed -e "s%@ADMINDN@%$ADMINID1%g" | mysql -u gums --password=$GUMSPASSWD


echo "it is recomended to run /usr/bin/mysql_secure_installation"
</file>

</post>

<post>
<file name="/etc/rc.d/rocksconfig.d/post-98-osg-gums-server" perms="0700">
#!/bin/bash
#hopefully script should run after /etc/rc.d/rocksconfig.d/post-02-411get
# to guarantee that sec_attrs has been transfered (ie. hostcert)

touch /root/cert-install.log
echo "running  /root/install_cert_gums.sh" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
/root/install_cert_gums.sh &gt;&gt; /root/cert-install.log 2&gt;&amp;1

if [ '&OSG_GUMSRunScript;' == 'FreshInstall' ]; then
   echo "running  /root/ConfigureGumsFreshInstall.sh" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
   /root/ConfigureGumsFreshInstall.sh &gt;&gt; /root/cert-install.log 2&gt;&amp;1
fi
if [ '&OSG_GUMSRunScript;' == 'UpgradeFromRPM' ]; then
   echo "running  /root/ConfigureGumsUpgradeFromRPM.sh" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
   /root/ConfigureGumsUpgradeFromRPM.sh &gt;&gt; /root/cert-install.log 2&gt;&amp;1
fi

echo "rm -rf /etc/rc.d/rocksconfig.d/post-98-osg-gums-server" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
rm -rf /etc/rc.d/rocksconfig.d/post-98-osg-gums-server
</file>
</post>

</kickstart> 

