<?xml version="1.0" standalone="no"?>

<kickstart>


	<description>
	The OSG Roll.
	</description>

	<copyright>
         No yet Eduardo's test	
	</copyright>

<changelog>
	$Log: osg-xrootd-server.xml,v $
	Revision 0.0  2012/10/05 05:48:53  eduardo
	Initial Revision
        Revision 0.1  2016/02/10 05:48:53  eduardo
        Added new rocks commands
	
</changelog>

<package>rocks-osg-command</package>
<package>libxml2.&arch;</package>
<package>yum-priorities</package>
<package>yum-cron</package>
<package>perl-libwww-perl</package>
<package>perl-URI</package>


<post>
<!-- 
     this xml should be called after yum.xml
     yum.xml requires libxml2.&arch; for VMs
-->
<eval mode="xml">
/opt/rocks/bin/rocks report host osg xrootd install  &hostname;
</eval>
<!-- The following customization is superseded by the new rocks command
     "rocks report host osg xrootd install  &hostname;"
     This code is keep for future reference or site tweaks

### Create xrootd User
#xrootd:x:457:402:XRootD runtime user:/var/spool/xrootd:/sbin/nologin
/usr/sbin/groupadd -g &OSG_xrootdgid; xrootd
/usr/sbin/useradd -r -u &OSG_xrootduid; -g &OSG_xrootdgid; -c "XRootD runtime user" -s /sbin/nologin -d /var/spool/xrootd xrootd
### Create the Gratia User
#gratia:x:464:464:gratia runtime user:/etc/gratia:/sbin/nologin
/usr/sbin/groupadd -g &OSG_gratiagid; gratia
/usr/sbin/useradd -r -u &OSG_gratiauid; -g &OSG_gratiagid; -c "gratia runtime user" -s /sbin/nologin -d /etc/gratia gratia

 ### install cms-xrootd-hdfs from local mirror###
yum install osg-ca-certs  &gt;&gt; /root/yum-install.log 2&gt;&amp;1
yum install cms-xrootd-hdfs  &gt;&gt; /root/yum-install.log 2&gt;&amp;1

 ### customize lcmaps.db configuration ###
sed -i -e "s#yourgums.yourdomain#&OSG_GumsServer;#" /etc/xrootd/lcmaps.cfg

 ### configure xrootd ###
mv /etc/xrootd/xrootd-clustered.cfg /etc/xrootd/xrootd-clustered.cfg.original
cp -p /etc/xrootd/xrootd.sample.hdfs.cfg /etc/xrootd/xrootd-clustered.cfg.template
-->


 <!-- customize firewall rules for xrootd-server  -->
<eval mode="xml">
/opt/rocks/bin/rocks add firewall host=&hostname; rulename=A20-XRD-REDIRECTOR-TCP-PORT network=public service=1213 protocol="tcp" action="ACCEPT" chain="INPUT" flags="-m state --state NEW"
/opt/rocks/bin/rocks add firewall host=&hostname; rulename=A20-XROOTD-TCP-PORT network=public service=1094 protocol="tcp" action="ACCEPT" chain="INPUT" flags="-m state --state NEW"
/opt/rocks/bin/rocks add firewall host=&hostname; rulename=A20-XROOTD-UDP-PORT network=public service=1094 protocol="udp" action="ACCEPT" chain="INPUT" flags="-m state --state NEW"
/opt/rocks/bin/rocks report host firewall &hostname;
</eval>

 <!-- pre-configure OSG already known paramenters -->
<eval mode="xml">
/opt/rocks/bin/rocks report host osg xrootd config  &hostname;
</eval>
<!-- The following customization is superseded by the new rocks command
     "rocks report host osg xrootd config  &hostname;"
     This code is keep for future reference or site tweaks
-->
#cp -p /etc/xrootd/xrootd-clustered.cfg.template /etc/xrootd/xrootd-clustered.cfg
#sed -i -e "s@all.role manager if xrootd.unl.edu@#all.role manager if xrootd.unl.edu@" /etc/xrootd/xrootd-clustered.cfg
#sed -i -e "s@all.manager xrootd.unl.edu:1213@all.manager &OSG_XROOTD_LOCAL_REDIRECTOR; 1213@" /etc/xrootd/xrootd-clustered.cfg
#sed -i -e "s@if exec xrootd@#if exec xrootd@" /etc/xrootd/xrootd-clustered.cfg
#sed -i -e "s@xrd.report xrootd.unl.edu:3333 every 300s all@xrd.report     xrootd.t2.ucsd.edu:9931 every 60s all sync@" /etc/xrootd/xrootd-clustered.cfg
#sed -i -e "s@xrootd.monitor all flush 5s mbuff 1k window 1s dest files io info user xrootd.unl.edu:3334 dest files io info stage user brian-test.unl.edu:9930@xrootd.monitor all auth flush io 60s ident 5m mbuff 8k rbuff 4k rnums 3 window 10s dest files io info user redir xrootd.t2.ucsd.edu:9930@" /etc/xrootd/xrootd-clustered.cfg
#sed -i -e "s@^fi@#fi@" /etc/xrootd/xrootd-clustered.cfg
#sed -i -e "s@-crl:3@-crl:3 -authzfun:libXrdLcmaps.so -authzfunparms:--osg,--lcmapscfg,/etc/xrootd/lcmaps.cfg,--loglevel,0|useglobals -gmapopt:10 -gmapto:0@" /etc/xrootd/xrootd-clustered.cfg
#sed -i -e "s@#oss.namelib@oss.namelib@" /etc/xrootd/xrootd-clustered.cfg
#sed -i -e "s@/usr/bin/XrdOlbMonPerf@/usr/share/xrootd/utils/XrdOlbMonPerf@" /etc/xrootd/xrootd-clustered.cfg
#echo "all.sitename &OSG_CMS_LOCAL_SITE;" &gt;&gt; /etc/xrootd/xrootd-clustered.cfg

<file name="/root/install_cert_xrootd.sh" perms="0750" >
#!/bin/sh

THISHOST=`hostname`
THISEXEC=$0
DIRNAME=`dirname $THISEXEC`
XRDSERVER="&OSG_XRDServer;"
CERTSDIR="&OSG_StoredCertsDir;/&hostname;"

#temporary solution (or permanent?) while figuring out
#how to import certs at installation step in a secure way
if [ ! -f $DIRNAME/hostcert.pem ]; then
  cp -p $CERTSDIR/hostcert.pem $DIRNAME/.
fi
if [ ! -f $DIRNAME/hostkey.pem ]; then
  cp -p $CERTSDIR/hostkey.pem  $DIRNAME/.
fi

if [ "$THISHOST" == "$XRDSERVER" ]||[ "$THISHOST" == "&hostname;.local" ]; then
  echo "installing grid certs on $THISHOST"
  echo "searching certs in $DIRNAME"
  if [ ! -f /etc/grid-security/hostcert.pem ]; then
     cp -p $DIRNAME/hostcert.pem /etc/grid-security/.
     echo "-- hostcert.pem copied from $DIRNAME/hostcert.pem"
  else
     echo "-- hostcert.pem already installed no need to install it."
  fi
  if [ ! -f /etc/grid-security/hostkey.pem ]; then
      cp -p $DIRNAME/hostkey.pem /etc/grid-security/.
     echo "-- hostkey.pem copied from $DIRNAME/hostkey.pem"
  else
     echo "-- hostkey.pem already installed no need to install it."
  fi
  chown root:root /etc/grid-security/hostcert.pem
  chown root:root /etc/grid-security/hostkey.pem
  chmod 444 /etc/grid-security/hostcert.pem
  chmod 400 /etc/grid-security/hostkey.pem
  [ -d /etc/grid-security/xrd ]||mkdir /etc/grid-security/xrd
  if [ ! -f /etc/grid-security/xrd/xrdcert.pem ]; then
     cp -p /etc/grid-security/hostcert.pem /etc/grid-security/xrd/xrdcert.pem
     echo "-- xrdcert.pem copied from hostcert.pem."
  else
     echo "-- xrdcert.pem already installed no need to install it."
  fi
  if [ ! -f /etc/grid-security/xrd/xrdkey.pem ]; then
     cp -p /etc/grid-security/hostkey.pem /etc/grid-security/xrd/xrdkey.pem
     echo "-- httpkey.pem copied from hostkey.pem."
  else
     echo "-- httpkey.pem already installed no need to install it." 
  fi
  chown -R xrootd: /etc/grid-security/xrd
  chmod 440 /etc/sudoers
else
  echo "$THISHOST Wrong server to install "
fi

</file>
</post>

<post>
<file name="/etc/rc.d/rocksconfig.d/post-98-osg-xrd-server" perms="0700">
#!/bin/bash
#hopefully script should run after /etc/rc.d/rocksconfig.d/post-02-411get
# to guarantee that sec_attrs has been transfered (ie. hostcert)

touch /root/cert-install.log
/root/install_cert_xrootd.sh &gt;&gt; /root/cert-install.log 2&gt;&amp;1

echo "running  /root/XrootdConfigurator" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
/root/XrootdConfigurator 

CMSUSERCERT=&OSG_CMS_USERCERT;
CMSUSERKEY=&OSG_CMS_USERKEY;
CMSSITE=&OSG_CMS_LOCAL_SITE;
XRDSTART=&OSG_XRD_Start;

if [ ! -f "$CMSUSERCERT" ]||[ ! -f "$CMSUSERKEY" ]||[ "x$CMSSITE" == "x" ]; then
  if [ ! -f "$CMSUSERCERT" ]; then 
    echo "-- Either rocks attr OSG_CMS_USERCERT does not exist or is set to non-existing file" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
    echo "   --on frontend try: rocks set host attr &hostname; OSG_CMS_USERCERT value='/home/your-user/.globus/usercert.pem'" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
    if [ "x$CMSUSERCERT" == "x" ]; then
       CMSUSERCERT=/home/your-user/.globus/usercert.pem
    fi
  fi
  if [ ! -f "$CMSUSERKEY" ]; then 
    echo "-- Either rocks attr OSG_CMS_USERKEY does not exist or is set to non-existing file" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
    echo "   --on frontend try: rocks set host attr &hostname; OSG_CMS_USERKEY value='/home/your-user/.globus/userkey.pem'" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
    if [ "x$CMSUSERKEY" == "x" ]; then
       CMSUSERKEY=/home/your-user/.globus/userkey.pem
    fi
  fi
  if [ "x$CMSSITE" == "x" ]; then 
    echo "-- rocks attr OSG_CMS_LOCAL_SITE does not exist" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
    echo "   --on frontend try: rocks set host attr &hostname; OSG_CMS_LOCAL_SITE value='T3_US_YOURSITE'" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
    CMSSITE=T3_US_YOURSITE
  fi

  echo "" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
  echo "After fixing attrs run:" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
  echo "curl -s -S --cert ${CMSUSERCERT} --key ${CMSUSERKEY} --capath /etc/grid-security/certificates -X GET \"https://cmsweb.cern.ch/gitweb/?p=siteconf/.git;a=blob_plain;f=${CMSSITE}/PhEDEx/storage.xml;hb=HEAD\" -o /etc/xrootd/storage.xml" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
else
  echo "--Assuming your cert has access to https://cmsweb.cern.ch/gitweb/?p=siteconf in order to download ${CMSSITE}/PhEDEx/storage.xml" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
  echo "--Downloading /etc/xrootd/storage.xml with command ..." &gt;&gt; /root/cert-install.log 2&gt;&amp;1
  echo "curl -s -S --cert ${CMSUSERCERT} --key ${CMSUSERKEY} --capath /etc/grid-security/certificates -X GET \"https://cmsweb.cern.ch/gitweb/?p=siteconf/.git;a=blob_plain;f=${CMSSITE}/PhEDEx/storage.xml;hb=HEAD\" -o /etc/xrootd/storage.xml" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
  curl -s -S --cert ${CMSUSERCERT} --key ${CMSUSERKEY} --capath /etc/grid-security/certificates -X GET "https://cmsweb.cern.ch/gitweb/?p=siteconf/.git;a=blob_plain;f=${CMSSITE}/PhEDEx/storage.xml;hb=HEAD" -o /etc/xrootd/storage.xml &gt;&gt; /root/cert-install.log 2&gt;&amp;1
fi

echo "" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
if [ "x$XRDSTART" == "x" ]; then 
  echo "-- rocks attr OSG_XRD_Start does not exist" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
  echo "   --on frontend try: rocks set host attr &hostname; OSG_XRD_Start value=True" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
  echo "                     --to start xrootd automatically after reinstall" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
  echo "                     --if you are happy with your configuration just do:" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
  echo "                       --chkconfig xrootd on (to set start xrootd after reboot)" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
  echo "                       --chkconfig cms on (to set start cmsd after reboot)" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
  echo "                       --service xrootd start (to start xrootd)" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
  echo "                       --service cmsd start (to start cmsd)" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
else
  echo "-- rocks attr OSG_XRD_Start is set to '$XRDSTART'" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
  if [ "x$XRDSTART" == "xTrue" ]||[ "x$XRDSTART" == "xtrue" ]; then
    chkconfig xrootd on
    chkconfig cmsd on
    service xrootd start
    service cmsd start
  else
    echo "-- don't understand rocks attr OSG_XRD_Start value" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
    echo "   --accepted values to start xrootd automatically are True or true" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
    echo "   --if you are happy with your configuration just do:" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
    echo "       --chkconfig xrootd on" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
    echo "       --chkconfig cms on" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
    echo "       --service xrootd start" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
    echo "       --service cmsd start" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
  fi
fi

echo "rm -rf /etc/rc.d/rocksconfig.d/post-98-osg-xrd-server" &gt;&gt; /root/cert-install.log 2&gt;&amp;1
rm -rf /etc/rc.d/rocksconfig.d/post-98-osg-xrd-server
</file>
</post>

</kickstart> 

